
package perzistencija;

import java.awt.Font;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author Dejan
 */
public class Application extends javax.swing.JFrame {

    int id;
    String name;
    int numberOfYears;
    String address;
    int amountOfIncome;
    
    static JFrame f;
    
    public Application() {
        initComponents();
        
        setLocationRelativeTo(null); 
        
        findCombo.setEnabled(false);
        updateFindByCombo.setEnabled(false);
        deleteCombo.setEnabled(false);
        nameField.setEnabled(false);
        numberOfYearsField.setEnabled(false);
        addressField.setEnabled(false);
        amountOfIncomeField.setEnabled(false);
        searchField.setEnabled(false);
        updateChangeCombo.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        create = new javax.swing.JButton();
        find = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        numberOfYearsField = new javax.swing.JTextField();
        addressField = new javax.swing.JTextField();
        amountOfIncomeField = new javax.swing.JTextField();
        searchField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        findCombo = new javax.swing.JComboBox<>();
        updateFindByCombo = new javax.swing.JComboBox<>();
        deleteCombo = new javax.swing.JComboBox<>();
        clearButton = new javax.swing.JButton();
        nameField = new javax.swing.JTextField();
        updateChangeCombo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Assignment 1");
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(0, 0, 0));
        setPreferredSize(new java.awt.Dimension(600, 500));

        create.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        create.setText("Create");
        create.setPreferredSize(new java.awt.Dimension(135, 37));
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        find.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        find.setText("Find");
        find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findActionPerformed(evt);
            }
        });

        update.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        submitButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        numberOfYearsField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        addressField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        amountOfIncomeField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        searchField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Name:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Number of years:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Address");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Amount of income:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Search:");

        findCombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        findCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "By:", "ID", "Name", "Number of years", "Address", "Amount of income", "All" }));
        findCombo.setEnabled(false);
        findCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findComboActionPerformed(evt);
            }
        });

        updateFindByCombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updateFindByCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Find by:", "ID" }));
        updateFindByCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateFindByComboActionPerformed(evt);
            }
        });

        deleteCombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        deleteCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "By:", "ID" }));
        deleteCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteComboActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        nameField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        updateChangeCombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updateChangeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Change:", "Name", "Number of years", "Address", "Amount of income" }));
        updateChangeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateChangeComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(find, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(create, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(findCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updateFindByCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updateChangeCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numberOfYearsField)
                    .addComponent(addressField)
                    .addComponent(amountOfIncomeField)
                    .addComponent(searchField)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 169, Short.MAX_VALUE)
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(nameField))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(create, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(find, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(findCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numberOfYearsField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(updateFindByCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateChangeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(deleteCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(amountOfIncomeField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        
        nameField.setEnabled(true);
        numberOfYearsField.setEnabled(true);
        addressField.setEnabled(true);
        amountOfIncomeField.setEnabled(true);
        searchField.setEnabled(false);
        findCombo.setEnabled(false);
        updateFindByCombo.setEnabled(false);
        deleteCombo.setEnabled(false);
        updateChangeCombo.setEnabled(false);
    
    }//GEN-LAST:event_createActionPerformed

    private void findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findActionPerformed
        
        findCombo.setEnabled(true);
        updateFindByCombo.setEnabled(false);
        deleteCombo.setEnabled(false);
        nameField.setEnabled(false);
        numberOfYearsField.setEnabled(false);
        addressField.setEnabled(false);
        amountOfIncomeField.setEnabled(false);
        searchField.setEnabled(false);
        updateChangeCombo.setEnabled(false);
    }//GEN-LAST:event_findActionPerformed

    private void findComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findComboActionPerformed
        
        int findUser = findCombo.getSelectedIndex();
        
        switch(findUser){
            
            case 0:
                
                updateFindByCombo.setEnabled(false);
                deleteCombo.setEnabled(false);
                nameField.setEnabled(false);
                numberOfYearsField.setEnabled(false);
                addressField.setEnabled(false);
                amountOfIncomeField.setEnabled(false);
                searchField.setEnabled(false);
                updateChangeCombo.setEnabled(false);
                
            break;    
            case 1:
                
                searchField.setEnabled(true);
                updateFindByCombo.setEnabled(false);
                deleteCombo.setEnabled(false);
                nameField.setEnabled(false);
                numberOfYearsField.setEnabled(false);
                addressField.setEnabled(false);
                amountOfIncomeField.setEnabled(false);
                updateChangeCombo.setEnabled(false);
                
            break;
            case 2:
                
                searchField.setEnabled(true);
                nameField.setEnabled(false);
                updateFindByCombo.setEnabled(false);
                deleteCombo.setEnabled(false);
                numberOfYearsField.setEnabled(false);
                addressField.setEnabled(false);
                amountOfIncomeField.setEnabled(false);
                updateChangeCombo.setEnabled(false);
                
            break;
            case 3:
                
                searchField.setEnabled(true);
                numberOfYearsField.setEnabled(false);
                updateFindByCombo.setEnabled(false);
                deleteCombo.setEnabled(false);
                nameField.setEnabled(false);
                addressField.setEnabled(false);
                amountOfIncomeField.setEnabled(false);
                updateChangeCombo.setEnabled(false);
                
            break;
            case 4:
                
                searchField.setEnabled(true);
                addressField.setEnabled(false);
                updateFindByCombo.setEnabled(false);
                deleteCombo.setEnabled(false);
                nameField.setEnabled(false);
                numberOfYearsField.setEnabled(false);
                amountOfIncomeField.setEnabled(false);
                updateChangeCombo.setEnabled(false);
                
            break;
            case 5:
                
                searchField.setEnabled(true);
                amountOfIncomeField.setEnabled(false);
                updateFindByCombo.setEnabled(false);
                deleteCombo.setEnabled(false);
                nameField.setEnabled(false);
                numberOfYearsField.setEnabled(false);
                addressField.setEnabled(false);
                updateChangeCombo.setEnabled(false);
                
            break;
            case 6:
                
                updateFindByCombo.setEnabled(false);
                deleteCombo.setEnabled(false);
                nameField.setEnabled(false);
                numberOfYearsField.setEnabled(false);
                addressField.setEnabled(false);
                amountOfIncomeField.setEnabled(false);
                searchField.setEnabled(false);
                updateChangeCombo.setEnabled(false);
            break;
        }
    }//GEN-LAST:event_findComboActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        
        updateFindByCombo.setEnabled(true);
        findCombo.setEnabled(false);
        deleteCombo.setEnabled(false);
        nameField.setEnabled(false);
        numberOfYearsField.setEnabled(false);
        addressField.setEnabled(false);
        amountOfIncomeField.setEnabled(false);
        searchField.setEnabled(false);
        updateChangeCombo.setEnabled(false);
    }//GEN-LAST:event_updateActionPerformed

    private void updateFindByComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateFindByComboActionPerformed
        
        int updateUser = updateFindByCombo.getSelectedIndex();
        
        switch(updateUser){
            
            case 0:
                
                findCombo.setEnabled(false);
                deleteCombo.setEnabled(false);
                nameField.setEnabled(false);
                numberOfYearsField.setEnabled(false);
                addressField.setEnabled(false);
                amountOfIncomeField.setEnabled(false);
                searchField.setEnabled(false);
                updateChangeCombo.setEnabled(false);
                
            break;    
            case 1:
                
                updateChangeCombo.setEnabled(true);
                searchField.setEnabled(false);
                findCombo.setEnabled(false);
                deleteCombo.setEnabled(false);
                nameField.setEnabled(false);
                numberOfYearsField.setEnabled(false);
                addressField.setEnabled(false);
                amountOfIncomeField.setEnabled(false);
                
            break;
            
        }
       
    }//GEN-LAST:event_updateFindByComboActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        
        deleteCombo.setEnabled(true);
        findCombo.setEnabled(false);
        updateFindByCombo.setEnabled(false);
        nameField.setEnabled(false);
        numberOfYearsField.setEnabled(false);
        addressField.setEnabled(false);
        amountOfIncomeField.setEnabled(false);
        searchField.setEnabled(false);
        updateChangeCombo.setEnabled(false);
    }//GEN-LAST:event_deleteActionPerformed

    private void deleteComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteComboActionPerformed
        
        int deleteUser = deleteCombo.getSelectedIndex();
        
        switch(deleteUser){
            
            case 0:
                
                updateFindByCombo.setEnabled(false);
                findCombo.setEnabled(false);
                nameField.setEnabled(false);
                numberOfYearsField.setEnabled(false);
                addressField.setEnabled(false);
                amountOfIncomeField.setEnabled(false);
                searchField.setEnabled(false);
                updateChangeCombo.setEnabled(false);
                
            break;    
            case 1:
                
                searchField.setEnabled(true);
                findCombo.setEnabled(false);
                updateFindByCombo.setEnabled(false);
                nameField.setEnabled(false);
                numberOfYearsField.setEnabled(false);
                addressField.setEnabled(false);
                amountOfIncomeField.setEnabled(false);
                updateChangeCombo.setEnabled(false);
                
            break;
            
        }
    }//GEN-LAST:event_deleteComboActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        
        nameField.setText("");
        numberOfYearsField.setText("");
        addressField.setText("");
        amountOfIncomeField.setText("");
        searchField.setText("");
        findCombo.setEnabled(false);
        updateFindByCombo.setEnabled(false);
        updateChangeCombo.setEnabled(false);
        deleteCombo.setEnabled(false);
        findCombo.setSelectedIndex(0);
        updateFindByCombo.setSelectedIndex(0);
        updateChangeCombo.setSelectedIndex(0);
        deleteCombo.setSelectedIndex(0);
    }//GEN-LAST:event_clearButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        
        try(java.sql.Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/infoSystem", "root", "");){
            
            
            
                if(nameField.isEnabled() || numberOfYearsField.isEnabled() || addressField.isEnabled() || amountOfIncomeField.isEnabled()){

                    numberOfYears = Integer.parseInt(numberOfYearsField.getText());
                    amountOfIncome = Integer.parseInt(amountOfIncomeField.getText());
                    
                    Worker worker = new Worker(id, nameField.getText(), numberOfYears, addressField.getText(), amountOfIncome);
                    

                    PreparedStatement st = conn.prepareStatement("INSERT INTO workers (name,numberOfYears,address,amountOfIncome) VALUES (?,?,?,?)");
                    st.setString(1, worker.getName());
                    st.setInt(2, worker.getNumberOfYears());
                    st.setString(3, worker.getAddress());
                    st.setInt(4, worker.getAmountOfIncome());
                    st.execute();
                    
                    JOptionPane.showMessageDialog(null, "Worker is created!");
                }
                
                else if(findCombo.isEnabled()){
                    
                    int findUser = findCombo.getSelectedIndex();
                    
                    Worker worker = null;
                    List<Worker> workers = new ArrayList();
                    DefaultListModel listM = new DefaultListModel();
                    Statement st = conn.createStatement();

                    switch(findUser){

                        case 0:

                            JOptionPane.showMessageDialog(null, "You must choose one option!");

                        break;    
                        case 1:
                            
                            id = Integer.parseInt(searchField.getText());
                            
                            
                                st.executeQuery("SELECT * FROM workers WHERE id = \'" + id + "\'");
                                ResultSet rs = st.getResultSet();
                                while(rs.next()){
                                    
                                    worker = new Worker(rs.getInt("id"), rs.getString("name"), rs.getInt("numberOfYears"), rs.getString("address"), rs.getInt("amountOfIncome"));
                                    workers.add(worker);
                                    
                                    listM.addElement(worker.toString());
                                }
                                f = new JFrame();
                                f.setSize(900, 300);
                                f.setLocation(100, 100);
        
                                JList list = new JList(listM);
                                list.setFont(new Font("serif", Font.PLAIN, 18));
                                f.add(list);
        
                                f.setVisible(true);
                                
                        break;
                        case 2:
                            
                            name = searchField.getText();
                            st.executeQuery("SELECT * FROM workers WHERE name = '" + name + "'");
                                ResultSet rs2 = st.getResultSet();
                                while(rs2.next()){
                                    
                                    worker = new Worker(rs2.getInt("id"), rs2.getString("name"), rs2.getInt("numberOfYears"), rs2.getString("address"), rs2.getInt("amountOfIncome"));
                                    workers.add(worker);
                                    
                                    listM.addElement(worker.toString());
                                }
                                f = new JFrame();
                                f.setSize(900, 300);
                                f.setLocation(100, 100);
        
                                JList list2 = new JList(listM);
                                list2.setFont(new Font("serif", Font.PLAIN, 18));
                                f.add(list2);
        
                                f.setVisible(true);

                        break;
                        case 3:

                            numberOfYears = Integer.parseInt(searchField.getText());
                            
                                st.executeQuery("SELECT * FROM workers WHERE numberOfYears = \'" + numberOfYears + "\'");
                                ResultSet rs3 = st.getResultSet();
                                while(rs3.next()){
                                    
                                    worker = new Worker(rs3.getInt("id"), rs3.getString("name"), rs3.getInt("numberOfYears"), rs3.getString("address"), rs3.getInt("amountOfIncome"));
                                    workers.add(worker);
                                    
                                    listM.addElement(worker.toString());
                                }
                                f = new JFrame();
                                f.setSize(900, 300);
                                f.setLocation(100, 100);
        
                                JList list3 = new JList(listM);
                                list3.setFont(new Font("serif", Font.PLAIN, 18));
                                f.add(list3);
        
                                f.setVisible(true);

                        break;
                        case 4:

                            address = searchField.getText();
                            st.executeQuery("SELECT * FROM workers WHERE address = '" + address + "'");
                                ResultSet rs4 = st.getResultSet();
                                while(rs4.next()){
                                    
                                    worker = new Worker(rs4.getInt("id"), rs4.getString("name"), rs4.getInt("numberOfYears"), rs4.getString("address"), rs4.getInt("amountOfIncome"));
                                    workers.add(worker);
                                    
                                    listM.addElement(worker.toString());
                                }
                                f = new JFrame();
                                f.setSize(900, 300);
                                f.setLocation(100, 100);
        
                                JList list4 = new JList(listM);
                                list4.setFont(new Font("serif", Font.PLAIN, 18));
                                f.add(list4);
        
                                f.setVisible(true);

                        break;
                        case 5:

                            amountOfIncome = Integer.parseInt(searchField.getText());
                            
                                st.executeQuery("SELECT * FROM workers WHERE amountOfIncome = \'" + amountOfIncome + "\'");
                                ResultSet rs5 = st.getResultSet();
                                while(rs5.next()){
                                    
                                    worker = new Worker(rs5.getInt("id"), rs5.getString("name"), rs5.getInt("numberOfYears"), rs5.getString("address"), rs5.getInt("amountOfIncome"));
                                    workers.add(worker);
                                    
                                    listM.addElement(worker.toString());
                                }
                                f = new JFrame();
                                f.setSize(900, 300);
                                f.setLocation(100, 100);
        
                                JList list5 = new JList(listM);
                                list5.setFont(new Font("serif", Font.PLAIN, 18));
                                f.add(list5);
        
                                f.setVisible(true);

                        break;
                        case 6:
                            
                                st.executeQuery("SELECT * FROM workers");
                                ResultSet rs6 = st.getResultSet();
                                while(rs6.next()){
                                    
                                    worker = new Worker(rs6.getInt("id"), rs6.getString("name"), rs6.getInt("numberOfYears"), rs6.getString("address"), rs6.getInt("amountOfIncome"));
                                    workers.add(worker);
                                    
                                    listM.addElement(worker.toString());
                                    
                                }
                                f = new JFrame();
                                f.setSize(900, 300);
                                f.setLocation(100, 100);
        
                                JList list6 = new JList(listM);
                                list6.setFont(new Font("serif", Font.PLAIN, 18));
                                f.add(list6);
        
                                f.setVisible(true);

                        break;
                    }
                }
                else if(updateFindByCombo.isEnabled()){
                   
                    int updateUser = updateFindByCombo.getSelectedIndex(); 
                    
                    Statement st = conn.createStatement();
                    
                    switch(updateUser){
                        
                        case 0:
                            
                            JOptionPane.showMessageDialog(null, "You must choose one option!");
                            
                        break;
                        case 1:
                            
                            int changeUser = updateChangeCombo.getSelectedIndex();
                            
                            switch(changeUser){
                                
                                case 0:
                                    
                                    JOptionPane.showMessageDialog(null, "You must choose one option!");
                                    
                                break;
                                case 1:
                                    
                                    id = Integer.parseInt(searchField.getText());
                                    String newName = JOptionPane.showInputDialog(f, "Enter new name:");
                                    searchField.setText(newName);

                                    st.execute("UPDATE workers SET name = \'" + newName + "\' WHERE id = \'" + id + "\'");


                                    JOptionPane.showMessageDialog(null, "Worker name was changed!");
                                    
                                break;
                                case 2:
                                    
                                    id = Integer.parseInt(searchField.getText());
                                    String newNumberOfyears = JOptionPane.showInputDialog(f, "Enter new number of years:");
                                    searchField.setText(newNumberOfyears);

                                    st.execute("UPDATE workers SET numberOfYears = \'" + newNumberOfyears + "\' WHERE id = \'" + id + "\'");


                                    JOptionPane.showMessageDialog(null, "Worker number of years was changed!");
                                    
                                break;
                                case 3:
                                    
                                    id = Integer.parseInt(searchField.getText());
                                    String newAddress = JOptionPane.showInputDialog(f, "Enter new address:");
                                    searchField.setText(newAddress);

                                    st.execute("UPDATE workers SET address = \'" + newAddress + "\' WHERE id = \'" + id + "\'");


                                    JOptionPane.showMessageDialog(null, "Worker address was changed!");
                                    
                                break;
                                case 4:
                                    
                                    id = Integer.parseInt(searchField.getText());
                                    String newAmountOfIncome = JOptionPane.showInputDialog(f, "Enter new amount of income:");
                                    searchField.setText(newAmountOfIncome);

                                    st.execute("UPDATE workers SET amountOfIncome = \'" + newAmountOfIncome + "\' WHERE id = \'" + id + "\'");


                                    JOptionPane.showMessageDialog(null, "Worker amount of income was changed!");
                                    
                                break;
                            }
                            
                        break;
                    }
                }
                else if(deleteCombo.isEnabled()){
                    
                    int deleteUser = deleteCombo.getSelectedIndex(); 
                    
                    
                    Statement st = conn.createStatement();
                    
                    switch(deleteUser){
                        
                        case 0:
                            
                            JOptionPane.showMessageDialog(null, "You must choose one option!");
                            
                        break;
                        case 1:
                            
                            id = Integer.parseInt(searchField.getText());
                            
                            st.execute("DELETE FROM workers WHERE id = \'" + id + "\'");
                            
                            
                            JOptionPane.showMessageDialog(null, "Worker with ID: " + id + " was deleted!");
                            
                        break;
                    }
                }
                else{
                    
                    JOptionPane.showMessageDialog(null, "You must choose one option!");
                }
            
        }
        catch(SQLException ex){
            
            JOptionPane.showMessageDialog(null, "Error in database connection: \n" + ex.getMessage());
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void updateChangeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateChangeComboActionPerformed
        
        deleteCombo.setEnabled(false);
        findCombo.setEnabled(false);
        updateFindByCombo.setEnabled(true);
        nameField.setEnabled(false);
        numberOfYearsField.setEnabled(false);
        addressField.setEnabled(false);
        amountOfIncomeField.setEnabled(false);
        searchField.setEnabled(true);
        updateChangeCombo.setEnabled(true);
    }//GEN-LAST:event_updateChangeComboActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Application().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressField;
    private javax.swing.JTextField amountOfIncomeField;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton create;
    private javax.swing.JButton delete;
    private javax.swing.JComboBox<String> deleteCombo;
    private javax.swing.JButton find;
    private javax.swing.JComboBox<String> findCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField nameField;
    private javax.swing.JTextField numberOfYearsField;
    private javax.swing.JTextField searchField;
    private javax.swing.JButton submitButton;
    private javax.swing.JButton update;
    private javax.swing.JComboBox<String> updateChangeCombo;
    private javax.swing.JComboBox<String> updateFindByCombo;
    // End of variables declaration//GEN-END:variables
}
